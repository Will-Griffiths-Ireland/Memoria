*{
    
     /* Setting a custom cursor */
    cursor:url(../images/cursor.png), pointer;

}

body{
    background-color: #000;
    margin: 0;
    width: 100vw;
    height: 100vh;
    box-sizing: border-box;
    border: 0;
    overflow-y: hidden;
    overflow-x: hidden;
}

img {  
    /* This filter to add drop shadows gives the cards some definition in stacks/overlap so that colors dor not blend into one.
    The advantage over a border is that this conforms to the actual image border and ignores transparency */   
    filter: drop-shadow(0px 0px 1px #000);
} 

/* This is the for the general game are that covers the entire viewable screen */

#gameArea{
    width: 100vw;
    height: 100vh;
    perspective: 2000px;
    position: fixed;
    top: 0;
    left: 0;
}

/* pushing the card up to indicate selection. Temp solution and uses !important to override positioning in other class */
.cardSelected{
    bottom: 10vh !important;
}

/* Class that applies default styling to the card container div */
.cardContainer {
    transform-style: preserve-3d;
    bottom: 5vh; 
}

/* Class that applies default styling to a cards face and back */

.cardBack{
    backface-visibility: hidden;
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 100;
}

/* This one is a little funky but its used as part of the fade out animation when we burn cards */
.cardFaceDel{
    position: absolute;
    z-index: 50;
    backface-visibility: visible;
    width: 100%;
    height: 100%;
}


.cardFace{
    transform: rotateY(180deg);
    position: absolute;
    z-index: 50;
    backface-visibility: hidden;
    width: 100%;
    height: 100%;
}

/* Flip card over */
.cardFlipped{
    animation-name: flip;
    animation-delay: 0ms;
    animation-iteration-count: 1;
    animation-duration: 2s;
    animation-fill-mode: forwards;
    
}
/* flip card back */
.cardFlippedBack{
    animation-name: flip;
    animation-delay: 0ms;
    animation-iteration-count: 1;
    animation-duration: 2s;
    animation-fill-mode: forwards;
    animation-direction: reverse;
}

@keyframes flip {
    0%{}
    100%{
        transform: rotateY(180deg);
    } 
}

/* Animation to emulated card dropping in from above with a fade and bounce */

.dropIn {
    animation-name: dropIn;
    animation-fill-mode:both ;
    animation-duration: 1000ms;
    animation-iteration-count: 1;
}

@keyframes dropIn{
    0%{ 
        transform: scale(4);
        opacity: 0;
    }
    80%{
        transform: scale(.9) ;
        opacity: 1;
    }
    100%{
        transform: scale(1) ;
        opacity: 1;
        }
    }

/* Class to fade out card before we remove it from the DOM */

.burnUp {

    animation-name: fadeOut;
    animation-duration: 3s;
    animation-fill-mode: forwards;
}

@keyframes fadeOut{
    0%{ transform: scale(1);
    opacity: 1;}
    100%{
        transform: scale(0);
        opacity: 0;
    }
}

.cardJiggle {
    animation-name: cardJiggle;
    animation-timing-function: ease-in-out;
    animation-direction: forwards;
    animation-duration: 1.5s;
    animation-iteration-count: infinite;
}

@keyframes cardJiggle{
    0%{
        transform: rotate(0.01deg);
    }
    20%{
        
        transform: rotate(-1.5deg);
    }
    40%{
        
        transform: rotate(3deg);
    }
    60%{
        
        transform: rotate(-1.5deg);
    }
    80%{
        
        transform: rotate(3deg);
    }
    100%{
        
        transform: rotate(-1.5deg); 
    }
}
